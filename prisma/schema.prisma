// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
  binaryTargets = ["native", "linux-arm64-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  Authenticator Authenticator[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  tasks         Task[]
  subjects      Subject[]
  tests         Test[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
}
 
model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@id([identifier, token])
}
 
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([userId, credentialID])
}

model Task {
  id          String     @id @default(uuid())
  title       String
  description String?
  status      TaskStatus @default(NOT_STARTED)
  dueDate     DateTime?
  userId      String
  subjectId   String?
  testId      String?    // どのテストに属するか
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  subject     Subject?   @relation(fields: [subjectId], references: [id])
  tests       Test[]     
  tags        Tag[]

  pages       Json?

  @@map("tasks")
}

enum TaskStatus {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
}

model Subject {
  id        String    @id @default(uuid())
  name      String
  userId    String
  color     String?   @default("#808080")
  createdAt DateTime  @default(now())

  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  tasks     Task[]
  tests     Test[]

  @@unique([name, userId])
  @@map("subjects")
}

model Tag {
  id     String @id @default(uuid())
  name   String @unique
  tasks  Task[]
}

model Test {
  id          String    @id @default(uuid())
  name        String
  date        DateTime
  description String?
  userId      String

  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  subjects    Subject[]
  tasks       Task[]

  @@map("tests")
}